/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_MATH_H_RPCGEN
#define _RPC_MATH_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct myoperands {
	struct {
		u_int arr_len;
		int *arr_val;
	} arr;
	int argument;
};
typedef struct myoperands myoperands;

#define RPCMATHPROG 0x30090948
#define RPCMATHVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define MULTIPLY 1
extern  enum clnt_stat multiply_1(myoperands *, int *, CLIENT *);
extern  bool_t multiply_1_svc(myoperands *, int *, struct svc_req *);
#define POWER 2
extern  enum clnt_stat power_1(myoperands *, int *, CLIENT *);
extern  bool_t power_1_svc(myoperands *, int *, struct svc_req *);
#define LOGN 3
extern  enum clnt_stat logn_1(myoperands *, int *, CLIENT *);
extern  bool_t logn_1_svc(myoperands *, int *, struct svc_req *);
#define LARGEST_PRIME_DIVISOR 4
extern  enum clnt_stat largest_prime_divisor_1(myoperands *, int *, CLIENT *);
extern  bool_t largest_prime_divisor_1_svc(myoperands *, int *, struct svc_req *);
extern int rpcmathprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define MULTIPLY 1
extern  enum clnt_stat multiply_1();
extern  bool_t multiply_1_svc();
#define POWER 2
extern  enum clnt_stat power_1();
extern  bool_t power_1_svc();
#define LOGN 3
extern  enum clnt_stat logn_1();
extern  bool_t logn_1_svc();
#define LARGEST_PRIME_DIVISOR 4
extern  enum clnt_stat largest_prime_divisor_1();
extern  bool_t largest_prime_divisor_1_svc();
extern int rpcmathprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_myoperands (XDR *, myoperands*);

#else /* K&R C */
extern bool_t xdr_myoperands ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_MATH_H_RPCGEN */
